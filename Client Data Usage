WITH client_filters AS (
	SELECT key,
		client AS name,
		project_type,
		application_type
	FROM production_etl.view_api_keys_latest
	WHERE key_type = 1
	    AND client = 'American Integrity'
),
app_imagery AS (
	SELECT 'APP Imagery' AS type,
		response_time AS timestep,
		client_filters.name AS client_name,
		client_filters.key AS key,
		client_filters.project_type AS use_cases,
		client_filters.application_type AS application_type,
		'OK' AS error_code,
		json_extract(inference_response, '$.Parcels') AS geom_id
	FROM production_etl.api_responses_partitioned a
		JOIN client_filters ON client_filters.key = a.user_token
	WHERE request_type = 'aoi_commercial'
	    AND inference_response IS NOT NULL
		AND inference_response != 'null'
		AND json_extract(inference_response, '$.Parcels') IS NOT NULL
		AND json_array_length(json_extract(inference_response, '$.Parcels')) > 0
	    AND response_year ='2022'
		AND response_month IN ('1','2','3','4','5','6','7')
),
app_imagery_raw AS (
    SELECT *,
    row_number() OVER (ORDER BY client_name) AS global_row_num
    FROM app_imagery
),
app_imagery_first_seen AS (
	--Create uniqueness
	SELECT client_name,
		geom_id,
		use_cases,
		min(timestep) AS timestep
	FROM app_imagery_raw
	GROUP BY 1, 2, 3
),
app_imagery_first_seen_glob_row AS (
	--Create uniqueness
	SELECT a.client_name,
		a.geom_id,
		a.timestep,
		a.use_cases,
		min(b.global_row_num) AS global_row_num,
        1 AS first_seen
	FROM app_imagery_first_seen a
	LEFT JOIN app_imagery_raw b ON ( 
	    a.client_name = b.client_name
		AND a.geom_id = b.geom_id
		AND a.use_cases = b.use_cases
		AND a.timestep = b.timestep
    )
	GROUP BY 1, 2, 3, 4
),
app_imagery_complete_data AS (
	--Add first_seen to the original table
	SELECT raw.*,
		fs.first_seen
	FROM app_imagery_raw raw
		LEFT JOIN app_imagery_first_seen_glob_row fs ON raw.global_row_num = fs.global_row_num
),
app_imagery_final AS(
     SELECT type,
    		client_name,
    		key,
    		use_cases,
    		application_type,
    		error_code,
    		date_trunc('month', date(timestep)) AS date,
    		min(date(timestep)) AS first_seen_record,
    		max(date(timestep)) AS last_seen_record,
    		count(*) total_app_imagery,
    		count(first_seen = 1) AS unique_app_imagery
    	FROM app_imagery_complete_data
    	GROUP BY 1,
    		2,
    		3,
    		4,
    		5,
    		6,
    		7
),
api_imagery AS (
	SELECT 'API Imagery' AS type,
		chips.response_created_at AS timestep,
		chips.client_name AS client_name,
		chips.api_key AS key,
		client_filters.project_type AS use_cases,
		client_filters.application_type AS application_type,
		'OK' AS error_code,
		chips.geom_id AS geom_id
	FROM production_etl.view_vinyasa_image_chips chips
		JOIN client_filters ON client_filters.key = chips.api_key
	WHERE response_year = '2022'
		AND response_month IN ('1','2','3','4','5','6','7')

),
api_imagery_raw AS (
    SELECT *,
    row_number() OVER (ORDER BY client_name) AS global_row_num
    FROM api_imagery
),
api_imagery_first_seen AS (
	--Create uniqueness
	SELECT client_name,
		geom_id,
		use_cases,
		min(timestep) AS timestep
	FROM api_imagery_raw
	GROUP BY 1, 2, 3
),
api_imagery_first_seen_glob_row AS (
	--Create uniqueness
	SELECT a.client_name,
		a.geom_id,
		a.timestep,
		a.use_cases,
		min(b.global_row_num) AS global_row_num,
        1 AS first_seen
	FROM api_imagery_first_seen a
	LEFT JOIN api_imagery_raw b ON ( 
	    a.client_name = b.client_name
		AND a.geom_id = b.geom_id
		AND a.use_cases = b.use_cases
		AND a.timestep = b.timestep
    )
	GROUP BY 1, 2, 3, 4
),
api_imagery_complete_data AS (
	--Add first_seen to the original table
	SELECT raw.*,
		fs.first_seen
	FROM api_imagery_raw raw
		LEFT JOIN api_imagery_first_seen_glob_row fs ON raw.global_row_num = fs.global_row_num
),
api_imagery_final AS (
    SELECT type,
    		client_name,
    		key,
    		use_cases,
    		application_type,
    		error_code,
    		date_trunc('month', date(timestep)) AS date,
    		min(date(timestep)) AS first_seen_record,
    		max(date(timestep)) AS last_seen_record,
    		count(*) total_api_imagery,
    		count(first_seen = 1) AS unique_api_imagery
    	FROM api_imagery_complete_data
    	GROUP BY 1,
    		2,
    		3,
    		4,
    		5,
    		6,
    		7
),
all_requests AS (
	--commercial
	(
		SELECT 'Commercial Lines' AS type,
			a.created_at AS timestep,
			b.name AS client_name,
			a.key AS key,
			b.project_type AS use_cases,
			b.application_type AS application_type,
			upper(error_code) AS error_code,
			unique_id,
			concat(coalesce(address, ''), ';', coalesce(latlng, '')) AS addresslatlong,
			parcel_id
		FROM production_etl.periscope_api_responses_cl_partitioned a
			JOIN client_filters b ON a.key = b.key
		WHERE response_year ='2022'
			AND response_month IN ('1','2','3','4','5','6','7')

	)
	
	UNION ALL
	
	
	--personal
	(
		SELECT 'Personal Lines' AS type,
			date(a.created_at) AS timestep,
			b.name AS client_name,
			a.key AS key,
			b.project_type AS use_cases,
			b.application_type AS application_type,
			upper(error_code) AS error_code,
			unique_id,
			concat(coalesce(address, ''), ';', coalesce(latlng, '')) AS addresslatlong,
			geom_id AS parcel_id
		FROM production_etl.periscope_api_responses_partitioned a
			JOIN client_filters b ON a.key = b.key
		WHERE response_year ='2022'
			AND response_month IN ('1','2','3','4','5','6','7')
	)
),
all_requests_raw AS (
 SELECT *, 
    row_number() OVER (ORDER BY unique_id) AS global_row_num
 FROM all_requests
),
all_requests_raw_OK AS (
    SELECT *
    FROM all_requests_raw
    WHERE error_code = 'OK'
),
all_requests_first_seen_addresslatlong_OK AS (
	--Create uniqueness
	SELECT type,
	    client_name,
	    use_cases,
		addresslatlong,
		min(timestep) AS timestep
	FROM all_requests_raw_OK
	GROUP BY 1, 2, 3, 4
),
all_requests_first_seen_addresslatlong_OK_glob_row AS (
	--Create uniqueness
	SELECT a.type,
	    a.client_name,
		a.addresslatlong,
		a.use_cases,
		a.timestep,
		min(b.global_row_num) AS global_row_num,
        1 AS first_seen_addresslatlong
	FROM all_requests_first_seen_addresslatlong_OK a
	LEFT JOIN all_requests_raw_OK b ON ( a.type = b.type
	    AND a.client_name = b.client_name
		AND a.addresslatlong = b.addresslatlong
		AND a.use_cases = b.use_cases
		AND a.timestep = b.timestep
    )
	GROUP BY 1, 2, 3, 4, 5
),
all_requests_first_seen_parcel_OK AS (
	--Create uniqueness
	SELECT type,
	    client_name,
		parcel_id,
		use_cases,
		min(timestep) AS timestep
	FROM all_requests_raw_OK
	GROUP BY 1, 2, 3, 4
),
all_requests_first_seen_parcel_OK_glob_row AS (
    SELECT a.type,
	    a.client_name,
		a.parcel_id,
		a.use_cases,
		a.timestep,
        min(b.global_row_num) AS global_row_num,
        1 AS first_seen_parcel
    FROM all_requests_first_seen_parcel_OK a
    LEFT JOIN all_requests_raw_OK b ON ( 
        a.type = b.type
	    AND a.client_name = b.client_name
		AND a.parcel_id = b.parcel_id
		AND a.use_cases = b.use_cases
		AND a.timestep = b.timestep
    )
    GROUP BY 1, 2, 3, 4, 5
),
all_requests_complete_data_OK_parcel AS (
	--Add first_seen to the original table
	SELECT raw.*,
		fsp.first_seen_parcel
	  FROM all_requests_raw_OK raw
	    LEFT JOIN all_requests_first_seen_parcel_OK_glob_row fsp ON raw.global_row_num = fsp.global_row_num
),
all_requests_complete_data_OK_parcel_addresslatlong AS (
	--Add first_seen to the original table
	SELECT raw.*,
		fs.first_seen_addresslatlong
	  FROM  all_requests_complete_data_OK_parcel raw
	    LEFT JOIN all_requests_first_seen_addresslatlong_OK_glob_row fs ON raw.global_row_num = fs.global_row_num
),
all_requests_final_OK AS (
    SELECT type,
    		client_name,
    		key,
    		use_cases,
    		application_type,
    		error_code,
    		date_trunc('month', date(timestep)) AS date,
    		min(date(timestep)) AS first_seen_record,
    		max(date(timestep)) AS last_seen_record,
    		count(distinct unique_id) AS total_requests,
    		count(first_seen_addresslatlong = 1) AS unique_requests,
    		count(first_seen_parcel = 1) AS unique_geoms_returned
    	FROM all_requests_complete_data_OK_parcel_addresslatlong
    	GROUP BY 1,
    		2,
    		3,
    		4,
    		5,
    		6,
    		7
),
all_requests_raw_not_OK AS (
    SELECT *
    FROM all_requests_raw
    WHERE error_code != 'OK' 
        OR error_code = ''
        OR error_code IS NULL
),
all_requests_first_seen_addresslatlong_not_OK AS (
	--Create uniqueness
	SELECT type,
	    client_name,
		addresslatlong,
		use_cases,
		min(timestep) AS timestep
	FROM all_requests_raw_not_OK
	GROUP BY 1, 2, 3, 4
),
all_requests_first_seen_addresslatlong_not_OK_glob_row AS (
	--Create uniqueness
	SELECT a.type,
	    a.client_name,
		a.addresslatlong,
		a.use_cases,
		a.timestep,
		min(b.global_row_num) AS global_row_num,
        1 AS first_seen_addresslatlong
	FROM all_requests_first_seen_addresslatlong_not_OK a
	LEFT JOIN all_requests_raw_not_OK b ON ( a.type = b.type
	    AND a.client_name = b.client_name
		AND a.addresslatlong = b.addresslatlong
		AND a.use_cases = b.use_cases
		AND a.timestep = b.timestep
    )
	GROUP BY 1, 2, 3, 4, 5
),
all_requests_complete_data_not_OK_addresslatlong AS (
	--Add first_seen to the original table
	SELECT raw.*,
		fs.first_seen_addresslatlong
	FROM all_requests_raw_not_OK raw
		LEFT JOIN all_requests_first_seen_addresslatlong_not_OK_glob_row fs ON raw.global_row_num = fs.global_row_num
),
all_requests_final_not_OK AS (
    SELECT type,
		client_name,
		key,
		use_cases,
		application_type,
		error_code,
		date_trunc('month', date(timestep)) AS date,
		min(date(timestep)) AS first_seen_record,
		max(date(timestep)) AS last_seen_record,
		count(distinct unique_id) AS total_requests,
		count(first_seen_addresslatlong = 1) AS unique_requests,
		0 AS unique_geoms_returned 
	FROM all_requests_complete_data_not_OK_addresslatlong
	GROUP BY 1,
		2,
		3,
		4,
		5,
		6,
		7
),
all_requests_final AS(
	(
		SELECT *
		FROM all_requests_final_OK
	)
	UNION ALL
	(
		SELECT *
		FROM all_requests_final_not_OK
	)
),
all_requests_api_imagery AS (
	SELECT coalesce(ar.type, i.type) AS type,
		coalesce(ar.client_name, i.client_name) AS client_name,
		coalesce(ar.key, i.key) AS key,
		coalesce(ar.use_cases, i.use_cases) AS use_cases,
		coalesce(ar.application_type, i.application_type) AS application_type,
		coalesce(ar.error_code, i.error_code) AS error_code,
		coalesce(ar.date, i.date) AS date,
		IF(
			ar.first_seen_Record <= IF(
				i.first_seen_record IS NULL,
				ar.first_seen_record,
				i.first_seen_record
			),
			ar.first_seen_record,
			i.first_seen_record
		) AS first_seen_record,
		IF(
			ar.last_seen_Record >= IF(
				i.last_seen_record IS NULL,
				ar.last_seen_record,
				i.last_seen_record
			),
			ar.last_seen_record,
			i.last_seen_record
		) AS last_seen_record,
		coalesce(ar.total_requests, 0) AS total_requests,
		coalesce(ar.unique_requests, 0) AS unique_requests,
		coalesce(ar.unique_geoms_returned, 0) AS unique_geoms_returned,
		coalesce(i.total_api_imagery, 0) AS total_api_imagery,
		coalesce(i.unique_api_imagery, 0) AS unique_api_imagery
	FROM all_requests_final ar
		FULL JOIN api_imagery_final i ON (
			ar.client_name = i.client_name
			OR (
				ar.client_name IS NULL
				AND i.client_name IS NULL
			)
		)
		AND (
			ar.key = i.key
			OR (
				ar.key IS NULL
				AND i.key IS NULL
			)
		)
		AND (
			ar.use_cases = i.use_cases
			OR (
				ar.use_cases IS NULL
				AND i.use_cases IS NULL
			)
		)
		AND (
			ar.application_type = i.application_type
			OR (
				ar.application_type IS NULL
				AND i.application_type IS NULL
			)
		)
		AND (
			ar.error_code = i.error_code
			OR (
				ar.error_code IS NULL
				AND i.error_code IS NULL
			)
		)
		AND (
			ar.date = i.date
			OR (
				ar.date IS NULL
				AND i.date IS NULL
			)
		)
),
all_requests_api_app_imagery AS (
	SELECT coalesce(ar.type, i.type) AS type,
		coalesce(ar.client_name, i.client_name) AS client_name,
		coalesce(ar.key, i.key) AS key,
		coalesce(ar.use_cases, i.use_cases) AS use_cases,
		coalesce(ar.application_type, i.application_type) AS application_type,
		coalesce(ar.error_code, i.error_code) AS error_code,
		coalesce(ar.date, i.date) AS date,
		IF(
			ar.first_seen_Record <= IF(
				i.first_seen_record IS NULL,
				ar.first_seen_record,
				i.first_seen_record
			),
			ar.first_seen_record,
			i.first_seen_record
		) AS first_seen_record,
		IF(
			ar.last_seen_Record >= IF(
				i.last_seen_record IS NULL,
				ar.last_seen_record,
				i.last_seen_record
			),
			ar.last_seen_record,
			i.last_seen_record
		) AS last_seen_record,
		coalesce(ar.total_requests, 0) AS total_requests,
		coalesce(ar.unique_requests, 0) AS unique_requests,
		coalesce(ar.unique_geoms_returned, 0) AS unique_geoms_returned,
		coalesce(ar.total_api_imagery, 0) AS total_api_imagery,
		coalesce(ar.unique_api_imagery, 0) AS unique_api_imagery,
		coalesce(i.total_app_imagery, 0) AS total_app_imagery,
		coalesce(i.unique_app_imagery, 0) AS unique_app_imagery
	FROM all_requests_api_imagery ar
		FULL JOIN app_imagery_final i ON (
			ar.client_name = i.client_name
			OR (
				ar.client_name IS NULL
				AND i.client_name IS NULL
			)
		)
		AND (
			ar.key = i.key
			OR (
				ar.key IS NULL
				AND i.key IS NULL
			)
		)
		AND (
			ar.use_cases = i.use_cases
			OR (
				ar.use_cases IS NULL
				AND i.use_cases IS NULL
			)
		)
		AND (
			ar.application_type = i.application_type
			OR (
				ar.application_type IS NULL
				AND i.application_type IS NULL
			)
		)
		AND (
			ar.error_code = i.error_code
			OR (
				ar.error_code IS NULL
				AND i.error_code IS NULL
			)
		)
		AND (
			ar.date = i.date
			OR (
				ar.date IS NULL
				AND i.date IS NULL
			)
		)
)
SELECT * 
FROM all_requests_api_app_imagery
